name: release

# Only do the release on vx.y.z tags.
on:
  push:
    tags:
      - "v[0-9]+.[0-9]+.[0-9]+"
      - "dev[0-9]+.[0-9]+.[0-9]+"

# We need this to be able to create releases.
permissions:
  contents: write

jobs:
  # The create-release job runs purely to initialize the GitHub release itself,
  # and names the release after the `x.y.z` tag that was pushed. It's separate
  # from building the release so that we only create the release once.
  create-release:
    name: create-release
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Get the release version from the tag
        if: env.VERSION == ''
        run: |
          echo "VERSION=${{ github.ref_name }}" >>$GITHUB_ENV
          echo "VERSION_NUMBER=$(echo ${{ github.ref_name }} | sed -e 's/^v//' -e 's/^dev//')" >>$GITHUB_ENV
      - name: Show the version
        run: |
          echo "VERSION = $VERSION"
          echo "VERSION_NUMBER = $VERSION_NUMBER"
      - name: Check that tag version and Cargo.toml version are the same
        shell: bash
        run: |
          if ! grep -q "version = \"$VERSION_NUMBER\"" Cargo.toml
          then
            echo "version does not match Cargo.toml" >&2
            exit 1
          fi
      - name: Create GitHub release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: gh release create "$VERSION" --draft --verify-tag --title "$VERSION"
    outputs:
      version: ${{ env.VERSION }}
      version_number: ${{ env.VERSION_NUMBER }}

  build-release:
    name: build-release
    needs: ['create-release']
    runs-on: ${{ matrix.os }}
    env:
      # For some builds, we use cross to test on 32-bit and big-endian
      # systems.
      CARGO: cargo
      # When CARGO is set to CROSS, this is set to `--target matrix.target`.
      TARGET_FLAGS:
      # When CARGO is set to CROSS, TARGET_DIR includes matrix.target.
      TARGET_DIR: ./target
      # Bump this as appropriate. We pin to a version to make sure CI
      # continues to work as cross releases in the past have broken things
      # in subtle ways.
      CROSS_VERSION: v0.2.5
      RUST_BACKTRACE: 1
    strategy:
      fail-fast: false
      matrix:
        include:
        - build: linux
          os: ubuntu-latest
          rust: nightly
          target: x86_64-unknown-linux-musl
          strip: x86_64-linux-musl-strip
        - build: stable-x86
          os: ubuntu-latest
          rust: stable
          target: i686-unknown-linux-gnu
          strip: x86_64-linux-gnu-strip
          qemu: i386
        - build: stable-aarch64
          os: ubuntu-latest
          rust: stable
          target: aarch64-unknown-linux-gnu
          strip: aarch64-linux-gnu-strip
          qemu: qemu-aarch64
        - build: stable-arm-gnueabihf
          os: ubuntu-latest
          rust: stable
          target: armv7-unknown-linux-gnueabihf
          strip: arm-linux-gnueabihf-strip
          qemu: qemu-arm
        - build: stable-arm-musleabihf
          os: ubuntu-latest
          rust: stable
          target: armv7-unknown-linux-musleabihf
          strip: arm-linux-musleabihf-strip
          qemu: qemu-arm
        - build: stable-arm-musleabi
          os: ubuntu-latest
          rust: stable
          target: armv7-unknown-linux-musleabi
          strip: arm-linux-musleabi-strip
          qemu: qemu-arm
        - build: stable-powerpc64
          os: ubuntu-latest
          rust: stable
          target: powerpc64-unknown-linux-gnu
          strip: powerpc64-linux-gnu-strip
          qemu: qemu-ppc64
        - build: stable-s390x
          os: ubuntu-latest
          rust: stable
          target: s390x-unknown-linux-gnu
          strip: s390x-linux-gnu-strip
          qemu: qemu-s390x
        - build: macos
          os: macos-latest
          rust: nightly
          target: x86_64-apple-darwin
        - build: win-msvc
          os: windows-latest
          rust: nightly
          target: x86_64-pc-windows-msvc
        - build: win-gnu
          os: windows-latest
          rust: nightly-x86_64-gnu
          target: x86_64-pc-windows-gnu
        - build: win32-msvc
          os: windows-latest
          rust: nightly
          target: i686-pc-windows-msvc

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install packages
      if: matrix.os == 'ubuntu-latest'
      shell: bash
      run: sudo apt install coreutils git musl-tools rsync

    - name: Install Rust
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: ${{ matrix.rust }}
        target: ${{ matrix.target }}

    - name: Use Cross
      if: matrix.os == 'ubuntu-latest' && matrix.target != ''
      shell: bash
      run: |
        # In the past, new releases of 'cross' have broken CI. So for now, we
        # pin it. We also use their pre-compiled binary releases because cross
        # has over 100 dependencies and takes a bit to compile.
        dir="$RUNNER_TEMP/cross-download"
        mkdir "$dir"
        echo "$dir" >> $GITHUB_PATH
        cd "$dir"
        curl -LO "https://github.com/cross-rs/cross/releases/download/$CROSS_VERSION/cross-x86_64-unknown-linux-musl.tar.gz"
        tar xf cross-x86_64-unknown-linux-musl.tar.gz
        echo "CARGO=cross" >> $GITHUB_ENV

    - name: Set target variables
      shell: bash
      run: |
        echo "TARGET_FLAGS=--target ${{ matrix.target }}" >> $GITHUB_ENV
        echo "TARGET_DIR=./target/${{ matrix.target }}" >> $GITHUB_ENV

    - name: Show command used for Cargo
      shell: bash
      run: |
        echo "cargo command is: ${{ env.CARGO }}"
        echo "target flag is: ${{ env.TARGET_FLAGS }}"
        echo "target dir is: ${{ env.TARGET_DIR }}"

    - name: Build release binary
      shell: bash
      run: |
        ${{ env.CARGO }} build --verbose --release ${{ env.TARGET_FLAGS }}
        if test "${{ matrix.os }}" = "windows-latest"
        then
            bin="target/${{ matrix.target }}/release/rmtree.exe"
        else
            bin="target/${{ matrix.target }}/release/rmtree"
        fi
        echo "BIN_CORE=$bin" >>$GITHUB_ENV

    - name: Strip release binary (macos)
      if: matrix.os == 'macos-latest'
      shell: bash
      run: strip "$BIN_CORE"

    - name: Strip release binary (cross)
      if: env.CARGO == 'cross'
      shell: bash
      run: |
        docker run --rm -v \
          "$PWD/target:/target:Z" \
          "ghcr.io/cross-rs/${{ matrix.target }}:main" \
          "${{ matrix.strip }}" \
          "/$BIN_CORE"

    - name: Determine archive name
      shell: bash
      run: |
        version_number="${{ needs.create-release.outputs.version_number }}"
        echo "ARCHIVE_CORE=rmtree-${version_number}-${{ matrix.target }}" >>$GITHUB_ENV

    - name: Creating directory for archive
      shell: bash
      run: |
        mkdir -p "$ARCHIVE_CORE"/doc
        cp "$BIN_CORE" "$ARCHIVE_CORE"/
        cp README.md LICENSE "$ARCHIVE_CORE"/doc

    - name: Build archive (Windows)
      shell: bash
      if: matrix.os == 'windows-latest'
      run: |
        7z a "$ARCHIVE_CORE.zip" "$ARCHIVE_CORE"
        certutil -hashfile "$ARCHIVE_CORE.zip" SHA256 > "$ARCHIVE_CORE.zip.sha256"
        echo "ASSET_CORE=$ARCHIVE_CORE.zip" >>$GITHUB_ENV
        echo "ASSET_CORE_SUM=$ARCHIVE_CORE.zip.sha256" >>$GITHUB_ENV

    - name: Build archive (Unix)
      shell: bash
      if: matrix.os != 'windows-latest'
      run: |
        tar czf "$ARCHIVE_CORE.tar.gz" "$ARCHIVE_CORE"
        if ! type sha256sum >/dev/null
        then
          sha256sum () {
            shasum -a 256 "$@"
          }
        fi
        sha256sum "$ARCHIVE_CORE.tar.gz" >"$ARCHIVE_CORE.tar.gz.sha256"
        echo "ASSET_CORE=$ARCHIVE_CORE.tar.gz" >>$GITHUB_ENV
        echo "ASSET_CORE_SUM=$ARCHIVE_CORE.tar.gz.sha256" >>$GITHUB_ENV

    - name: Upload release archive
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      shell: bash
      run: |
        version="${{ needs.create-release.outputs.version }}"
        gh release upload "$version" ${{ env.ASSET_CORE }} ${{ env.ASSET_CORE_SUM }}

  build-release-deb:
    name: build-release-deb
    needs: ['create-release']
    runs-on: ubuntu-latest
    env:
      TARGET_MUSL: x86_64-unknown-linux-musl
      TARGET_GNU: x86_64-unknown-linux-gnu
      RUST_BACKTRACE: 1

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install packages
      shell: bash
      run: sudo apt install coreutils musl-tools rsync

    - name: Install Rust
      run: |
        rustup toolchain install nightly --profile minimal --no-self-update
        rustup target add ${{ env.TARGET_MUSL }}
        rustup target add ${{ env.TARGET_GNU }}

    - name: Install Development Tools
      shell: bash
      run: |
        cargo install cargo-deb
        cargo install garden-tools

    # 'cargo deb' does not seem to provide a way to specify an asset that is
    # created at build time. To work around this, we force a debug build, copy out the
    # man page (and shell completions) produced from that build, put it into a
    # predictable location and then build the deb, which knows where to look.
    - name: Build debug binary to create release assets
      shell: bash
      run: |
        cargo build --target ${{ env.TARGET_MUSL }}
        echo "BIN_CORE=target/${{ env.TARGET_MUSL }}/debug/rmtree" >>$GITHUB_ENV

    - name: Create deployment directory
      shell: bash
      run: |
        dir=target/deb
        mkdir -p "$dir"
        echo "DEPLOY_DIR=$dir" >>$GITHUB_ENV

    - name: Generate user documentation
      shell: bash
      run: garden pkg/deb/doc -vv

    - name: Build Debian release binary
      shell: bash
      run: |
        garden --define target=${{ env.TARGET_MUSL }} pkg/deb/build -vv
        garden --define target=${{ env.TARGET_MUSL }} pkg/deb/package -vv
        version_number="${{ needs.create-release.outputs.version_number }}"
        echo "DEB_DIR=target/debian" >>$GITHUB_ENV
        echo "DEB_CORE_NAME=rmtree_${version_number}-1_amd64.deb" >>$GITHUB_ENV

    - name: Create sha256 sum of deb file
      shell: bash
      run: |
        cd "$DEB_DIR"
        sha256sum "$DEB_CORE_NAME" >"$DEB_CORE_NAME.sha256"
        echo "SUM_CORE=$DEB_CORE_NAME.sha256" >>$GITHUB_ENV

    - name: Upload release archive
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      shell: bash
      run: |
        version="${{ needs.create-release.outputs.version }}"
        cd "$DEB_DIR"
        gh release upload "$version" "$DEB_CORE_NAME" "$SUM_CORE"
